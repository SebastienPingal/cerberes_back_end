name: AWS Deployment Pipeline

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    branches: [master]
    types:
      - completed

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Download the artifact from CI instead of rebuilding
      - name: Download build artifact
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: ci.yml
          workflow_conclusion: success
          name: build-artifact
          path: .

      # Verify downloaded artifacts
      - name: Verify downloaded artifacts
        run: |
          echo "🔍 Verifying downloaded artifacts..."
          if [ -d "dist" ] && [ -f "package.json" ] && [ -f "pnpm-lock.yaml" ]; then
            echo "✅ Artifacts downloaded successfully"
          else
            echo "❌ Artifacts missing or incomplete"
            ls -la
            exit 1
          fi

      # Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Check for existing resources
      - name: Check for existing resources
        id: check-resources
        run: |
          echo "🔍 Checking for existing resources..."
          
          # Check for existing EC2 instance
          EC2_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=cerberes-instance" "Name=instance-state-name,Values=running,stopped,pending" --query "Reservations[0].Instances[0].InstanceId" --output text || echo "")
          if [ "$EC2_ID" != "" ]; then
            echo "✅ Found existing EC2 instance: $EC2_ID"
          else
            echo "🆕 No existing EC2 instance found"
          fi
          echo "EC2_ID=$EC2_ID" >> $GITHUB_ENV
          
          # Check for existing RDS instance
          RDS_ENDPOINT=$(aws rds describe-db-instances --db-instance-identifier cerberes-db --availability-zone ${{ secrets.AWS_REGION }}a --query "DBInstances[0].Endpoint.Address" --output text || echo "")
          if [ "$RDS_ENDPOINT" != "" ]; then
            echo "✅ Found existing RDS instance: $RDS_ENDPOINT"
          else
            echo "🆕 No existing RDS instance found"
          fi
          echo "RDS_ENDPOINT=$RDS_ENDPOINT" >> $GITHUB_ENV
          
          # Check for existing DB subnet group
          DB_SUBNET_GROUP_ID=$(aws rds describe-db-subnet-groups --db-subnet-group-name cerberes-db-subnet-group --availability-zone ${{ secrets.AWS_REGION }}a --query "DBSubnetGroups[0].DBSubnetGroupName" --output text || echo "")
          if [ "$DB_SUBNET_GROUP_ID" != "" ]; then
            echo "✅ Found existing DB subnet group: $DB_SUBNET_GROUP_ID"
          else
            echo "🆕 No existing DB subnet group found"
          fi
          echo "DB_SUBNET_GROUP_ID=$DB_SUBNET_GROUP_ID" >> $GITHUB_ENV
          
          # Check for existing subnets
          DEFAULT_VPC_ID=$(aws ec2 describe-vpcs --filters "Name=isDefault,Values=true" --query "Vpcs[0].VpcId" --output text)
          echo "DEFAULT_VPC_ID=$DEFAULT_VPC_ID" >> $GITHUB_ENV
          
          # Check for subnet in different AZs
          SUBNET_AZA_ID=$(aws ec2 describe-subnets --region ${{ secrets.AWS_REGION }} --filters "Name=vpc-id,Values=$DEFAULT_VPC_ID" "Name=availability-zone,Values=${{ secrets.AWS_REGION }}a" --query "Subnets[0].SubnetId" --output text || echo "")
          SUBNET_AZB_ID=$(aws ec2 describe-subnets --region ${{ secrets.AWS_REGION }} --filters "Name=vpc-id,Values=$DEFAULT_VPC_ID" "Name=availability-zone,Values=${{ secrets.AWS_REGION }}b" --query "Subnets[0].SubnetId" --output text || echo "")
          if [ "$SUBNET_AZA_ID" != "" ]; then
            echo "✅ Found existing private subnet in AZ A: $SUBNET_AZA_ID"
          else
            echo "🆕 No existing private subnet in AZ A: $SUBNET_AZA_ID"
          fi
          if [ "$SUBNET_AZB_ID" != "" ]; then
            echo "✅ Found existing private subnet in AZ B: $SUBNET_AZB_ID"
          else
            echo "🆕 No existing private subnet in AZ B: $SUBNET_AZB_ID"
          fi
          echo "SUBNET_AZA_ID=$SUBNET_AZA_ID" >> $GITHUB_ENV
          echo "SUBNET_AZB_ID=$SUBNET_AZB_ID" >> $GITHUB_ENV

          # check for subnets sufficient capacity for t3.micro
          SUBNET_AZA_CAPACITY=$(aws ec2 describe-subnets --region ${{ secrets.AWS_REGION }} --filters "Name=vpc-id,Values=$DEFAULT_VPC_ID" "Name=availability-zone,Values=${{ secrets.AWS_REGION }}a" --query "Subnets[0].AvailableIpAddressCount" --output text || echo "")
          SUBNET_AZB_CAPACITY=$(aws ec2 describe-subnets --region ${{ secrets.AWS_REGION }} --filters "Name=vpc-id,Values=$DEFAULT_VPC_ID" "Name=availability-zone,Values=${{ secrets.AWS_REGION }}b" --query "Subnets[0].AvailableIpAddressCount" --output text || echo "")
          if [ "$SUBNET_AZA_CAPACITY" -ge 10 ] && [ "$SUBNET_AZB_CAPACITY" -ge 10 ]; then
            echo "✅ Subnets have sufficient capacity"
          else
            echo "❌ Subnets do not have sufficient capacity"
          fi
          
          # Check for existing security group
          CERBERES_SG_ID=$(aws ec2 describe-security-groups --filters "Name=group-name,Values=cerberes-sg" "Name=vpc-id,Values=$DEFAULT_VPC_ID" --query "SecurityGroups[0].GroupId" --output text || echo "")
          if [ "$CERBERES_SG_ID" != "" ]; then
            echo "✅ Found existing security group: $CERBERES_SG_ID"
          else
            echo "🆕 No existing security group found"
          fi
          echo "CERBERES_SG_ID=$CERBERES_SG_ID" >> $GITHUB_ENV

      # Create terraform.tfvars file
      - name: Create terraform.tfvars
        run: |
          cat > terraform/terraform.tfvars << EOT
          aws_region      = "${{ secrets.AWS_REGION }}"
          app_name        = "cerberes"
          db_username     = "${{ secrets.DB_USERNAME }}"
          db_password     = "${{ secrets.DB_PASSWORD }}"
          ssh_key_name    = "${{ secrets.SSH_KEY_NAME }}"
          ec2_instance_type = "t2.micro"
          db_instance_class = "db.t3.micro"
          db_endpoint = "${{ env.RDS_ENDPOINT }}"
          ec2_id = "${{ env.EC2_ID }}"
          security_group_id = "${{ env.CERBERES_SG_ID }}"
          db_subnet_group_id = "${{ env.DB_SUBNET_GROUP_ID }}"
          subnet_az_a_id = "${{ env.SUBNET_AZA_ID }}"
          subnet_az_b_id = "${{ env.SUBNET_AZB_ID }}"
          subnet_az_a_capacity = "${{ env.SUBNET_AZA_CAPACITY }}"
          subnet_az_b_capacity = "${{ env.SUBNET_AZB_CAPACITY }}"
          EOT
          
          echo "🔑 Created terraform.tfvars with configuration"

      # Initialize Terraform
      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      # Plan Terraform changes
      - name: Terraform Plan
        id: terraform-plan
        working-directory: ./terraform
        run: terraform plan -out=tfplan

      # Apply Terraform configuration
      - name: Terraform Apply
        id: terraform-apply
        working-directory: ./terraform
        run: terraform apply -auto-approve tfplan

      # Get deployment information
      - name: Get deployment information
        if: steps.terraform-apply.outcome == 'success'
        run: |
          # Get EC2 instance information
          if [ "${{ env.EC2_ID }}" != "" ]; then
            # Use the existing EC2 instance ID
            EC2_ID="${{ env.EC2_ID }}"
          else
            # Get the newly created EC2 instance ID
            EC2_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=cerberes-instance" "Name=instance-state-name,Values=running,pending" --query "Reservations[0].Instances[0].InstanceId" --output text)
          fi
          
          # Get the public IP
          IP_ADDRESS=$(aws ec2 describe-instances --instance-ids $EC2_ID --query "Reservations[0].Instances[0].PublicIpAddress" --output text)
          echo "EC2_IP=$IP_ADDRESS" >> $GITHUB_ENV
          echo "🖥️ EC2 instance public IP: $IP_ADDRESS"
          
          # Get RDS endpoint
          DB_ENDPOINT=$(aws rds describe-db-instances --db-instance-identifier cerberes-db --query "DBInstances[0].Endpoint.Address" --output text)
          echo "DB_ENDPOINT=$DB_ENDPOINT" >> $GITHUB_ENV
          echo "🗄️ RDS endpoint: $DB_ENDPOINT"

      # Wait for EC2 instance to initialize
      - name: Wait for EC2 instance to initialize
        if: steps.terraform-apply.outcome == 'success'
        run: |
          echo "⏳ Waiting 60 seconds for EC2 instance to fully initialize..."
          sleep 60

      # Setup SSH key
      - name: Setup SSH key
        if: steps.terraform-apply.outcome == 'success'
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/ec2_key
          chmod 600 ~/.ssh/ec2_key
          echo "🔑 SSH key file created"
          
          # Test SSH connection
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/ec2_key ubuntu@${{ env.EC2_IP }} "echo SSH connection test successful"

      # Deploy application to EC2
      - name: Deploy application to EC2
        if: steps.terraform-apply.outcome == 'success'
        run: |
          # Create .env file for deployment
          cat > .env << EOF
          NODE_ENV=production
          DATABASE_URL=postgres://${{ secrets.DB_USERNAME }}:${{ secrets.DB_PASSWORD }}@${{ env.DB_ENDPOINT }}/cerberes
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          PORT=3000
          EOF
          
          # Create app directory on the server
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/ec2_key ubuntu@${{ env.EC2_IP }} "mkdir -p /home/ubuntu/app"
          
          # Clean up old files
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/ec2_key ubuntu@${{ env.EC2_IP }} "rm -rf /home/ubuntu/app/node_modules /home/ubuntu/app/dist"
          
          # Transfer configuration files
          echo "📦 Transferring configuration files..."
          scp -o StrictHostKeyChecking=no -i ~/.ssh/ec2_key .env package.json pnpm-lock.yaml ubuntu@${{ env.EC2_IP }}:/home/ubuntu/app/
          
          # Compress and transfer dist directory
          echo "📦 Compressing and transferring built code..."
          tar -czf dist.tar.gz dist/
          scp -o StrictHostKeyChecking=no -i ~/.ssh/ec2_key dist.tar.gz ubuntu@${{ env.EC2_IP }}:/home/ubuntu/app/
          
          # Compress and transfer node_modules directory
          echo "📦 Compressing and transferring node_modules..."
          tar -czf node_modules.tar.gz node_modules/
          scp -o StrictHostKeyChecking=no -i ~/.ssh/ec2_key node_modules.tar.gz ubuntu@${{ env.EC2_IP }}:/home/ubuntu/app/
          
          # Extract the archives on the server
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/ec2_key ubuntu@${{ env.EC2_IP }} << 'EOF'
            cd /home/ubuntu/app
            tar -xzf dist.tar.gz
            tar -xzf node_modules.tar.gz
            rm dist.tar.gz node_modules.tar.gz
            
            # Verify the .env file is properly formatted
            echo "🔍 Verifying .env file format..."
            if grep -q "DATABASE_URL=.*\n.*" .env; then
              echo "⚠️ Found line breaks in DATABASE_URL, fixing..."
              awk -F= '{if(NR==1) {printf "%s=%s\n",$1,$2} else {printf "%s=%s\n",$1,$2}}' .env > .env.fixed
              mv .env.fixed .env
            fi
            
            echo "✅ .env file verified"
          EOF
          
          echo "📦 Files deployed to EC2"

      # Configure and start application
      - name: Configure and start application
        if: steps.terraform-apply.outcome == 'success'
        run: |
          # Use ssh to configure and start the application
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/ec2_key ubuntu@${{ env.EC2_IP }} << 'EOF'
            cd /home/ubuntu/app
            
            # Install Node.js 18 if needed
            echo "🔍 Checking Node.js version..."
            NODE_VERSION=$(node -v || echo "none")
            
            if [[ "$NODE_VERSION" != "v18"* ]]; then
              echo "📦 Installing Node.js 18 LTS..."
              sudo apt update
              curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
              sudo apt install -y nodejs
              echo "✅ Node.js $(node -v) installed"
            fi
            
            # Install PM2 if needed
            if ! command -v pm2 &> /dev/null; then
              echo "📦 Installing PM2..."
              sudo npm install -g pm2
            fi
            
            # Install PostgreSQL client for database connection testing
            if ! command -v psql &> /dev/null; then
              echo "📦 Installing PostgreSQL client..."
              sudo apt-get update
              sudo apt-get install -y postgresql-client
            fi
            
            # Test database connection
            echo "🔍 Testing database connection..."
            DB_URL=$(grep DATABASE_URL .env | cut -d= -f2-)
            DB_HOST=$(echo $DB_URL | sed -n 's/.*@\(.*\)\/.*/\1/p')
            DB_USER=$(echo $DB_URL | sed -n 's/postgres:\/\/\(.*\):.*/\1/p')
            DB_PASSWORD=$(echo $DB_URL | sed -n 's/postgres:\/\/.*:\(.*\)@.*/\1/p')
            DB_NAME=$(echo $DB_URL | sed -n 's/.*\/\(.*\)/\1/p')
            
            echo "🔍 Testing PostgreSQL connection..."
            if PGPASSWORD="$DB_PASSWORD" psql -h "$DB_HOST" -U "$DB_USER" -d "$DB_NAME" -c "SELECT 1" -t -A -w -q; then
              echo "✅ Database connection successful!"
            else
              echo "❌ Database connection failed!"
              exit 1
            fi
            
            # Restart the application
            echo "🔄 Restarting application..."
            pm2 stop cerberes || echo "🤖 App not running"
            
            # Start the application
            echo "🚀 Starting application..."
            pm2 start dist/src/server.js --name cerberes --log-date-format 'YYYY-MM-DD HH:mm:ss.SSS' --merge-logs
            pm2 save
            
            # Check if the application started successfully
            sleep 5
            if pm2 show cerberes | grep -q "status.*online"; then
              echo "✅ Application started successfully!"
            else
              echo "❌ Application failed to start. Checking logs..."
              pm2 logs cerberes --lines 50
              exit 1
            fi
            
            # Configure PM2 to start on boot
            echo "🔄 Setting up PM2 to start on boot..."
            pm2 startup | grep "sudo" | bash || echo "⚠️ PM2 startup command failed, but continuing..."
            pm2 save
            
            echo "🚀 Deployment completed"
          EOF

      # Cleanup on failure
      - name: Cleanup on failure
        if: failure() && steps.terraform-apply.outcome == 'failure'
        working-directory: ./terraform
        run: |
          echo "🧹 Cleaning up failed deployment..."
          terraform destroy -auto-approve
          echo "♻️ Resources cleaned up."
